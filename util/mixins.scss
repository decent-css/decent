@mixin print-styles($declaration, $value) {
  @if type-of($declaration) == 'list' {
    @each $dec in $declaration {
      #{$dec}: $value;
    }
  }
  @else {
    #{$declaration}: $value
  }
}

@mixin parse-class-map($classes, $bp: null) {
  @each $class, $settings in $classes {
    $classname: '';

    @if $bp {
      $classname: #{$bp}-#{$class};
    }
    @else {
      $classname: $class;
    }

    @if type-of(nth($settings, 2)) == 'map' {
      @each $key, $value in nth($settings, 2) {
        @if $key != 'default' {
          .#{$classname}-#{$key} {
            @include print-styles(nth($settings, 1), $value)
          }
        }
        @else {
          .#{$classname} {
             @include print-styles(nth($settings, 1), $value)
          }
        }
      }
    }
    @else {
      .#{$classname} {
        @include print-styles(nth($settings, 1), nth($settings, 2))
      }
    }
  }
}

@mixin build-classes($classes, $breakpoints: null) {
  @include parse-class-map($classes);

  @if $breakpoints {
    @for $i from 1 to length($breakpoints)+1 {
      $key: nth(map-keys($breakpoints), $i);

      @media (min-width: map-get($breakpoints, $key)) {
        @include parse-class-map($classes, $key);
      }
    }
  }
}

@mixin build-colors($colorset, $name) {
  @each $shade in $colorset {
    $i: index($colorset, $shade)-1;

    @if $i == 0 {
      .c-#{$name} { color: $shade; }
      .cbg-#{$name} { background-color: $shade; }
    }
    @if $i == 1 {
      .c-#{$name}-alt { color: $shade; }
      .cbg-#{$name}-alt { background-color: $shade; }
    }
    @else {
      .c-#{$name}-alt-#{$i)} { color: $shade; }
      .cbg-#{$name}-alt-#{$i)} { background-color: $shade; }
    }
  }
}

@mixin interaction($interaction, $contexts, $state) {
  &[class*='#{$interaction}'] {
    @each $context, $styles in $contexts {
      @if $context == 'settings' {
        @include print-styles($styles);
      }

      @if $context == 'start' {
        &[class*='target'],
        [class*='#{$interaction}-target'] {
          @include print-styles($styles);
          transition: $default-transition;
        }
      }

      @if $context == 'end' {
        &[class*='target']:#{$state},
        &:hover [class*='#{$interaction}-target'] {
          @include print-styles($styles);
        }
      }
    }
  }
}
